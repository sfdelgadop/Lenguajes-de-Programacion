programa uno

const
  PI = 3.141592654
var
  v_disp, // Velocidad inicial
  a_disp : numerico // Angulo de disparo
  a_disp_rad : numerico // Igual que a_disp pero en radianes
  h_max : numerico // Altura maxima
  A : vector [10] numerico

inicio
  leer (v_disp, a_disp)
  a_disp_rad = a_disp * PI / 180
  h_max = ( (v_disp * sin (a_disp_rad) ) ^ 2 ) / (2 * 9.8)
  imprimir ("\n\nAltura maxima=", h_max)
  a = (b + c) * (b / y) + (y / c)		// Sentencia v�lida a nivel sint�ctico
  a = b + c; n = a / y	// Estas tambi�n, separadas por ;
  a = b - c % 10 + 1
  y = v0y * t + 1/2 * -g * t^2 // sin parentesis
  y = (v0y * t) + ( (1/2)*(-g)*(t^2) )

  A = {1,2,3,4,5,6,7,8,9,10}

  let = let [1]
  eval
  {
    caso ( let >= "A" and let <= "Z" )
      msg = "letra may�scula"
    caso ( let >= "a" and let <= "z" )
      msg = "letra min�scula"
    caso ( let >= "0" and let <= "9" )
      msg = "d�gito"
    sino
      msg = "alg�n otro"
  }
imprimir ("\nLa suma es ", suma)

    si (a>b)
    {
        a = 2
        sino si(a<4)
            a = 2+2
        si (1<2){
            a=3
        sino
            a =2
        }
    }

fin
subrutina pudo_abrirse_fuente() retorna logico
var
nomb_fuente : cadena
p_archivo : numerico
ok : logico
inicio
ok = NO
si ( paramval (1) == "-d" )
{
mostrar_inst = SI
p_archivo = 2
sino
mostrar_inst = NO
p_archivo = 1
}

si ( pcount() < p_archivo )
{
imprimir ("\nFalta especificar archivo fuente MicroL")
sino
nomb_fuente = paramval (p_archivo)
ok = set_stdin (nomb_fuente)
si ( not < 2 )
{
imprimir ("\nNo pudo abrirse archivo ", nomb_fuente)
ok = NO
}
}
retorna ( ok )
fin